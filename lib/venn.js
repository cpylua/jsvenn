// Generated by CoffeeScript 1.3.3

/*
container: DOM element or its ID for canvas
weights: area weights, {cards: [100, 200], overlap: 50}
height: canvas height, canvas width two times height
opts: drawing options

NOTE: the bigger circle is always drawn on the left
*/


(function() {
  var root, venn;

  venn = function(container, weights, height, opts) {
    var calcAngles, calcRadiuses, distance, draw, findDistance, interArea, intersectionArea, margin, normalizeWeights, paper, radiuses, scaleIntersection, width;
    if (height == null) {
      height = 200;
    }
    opts = opts || {
      fill: {
        left: "#FF6633",
        right: "#7FC633"
      },
      "fill-opacity": {
        left: 0.8,
        right: 0.8
      }
    };
    margin = 2;
    calcRadiuses = function(maxDiameter, cards) {
      var big, r, small, _ref;
      _ref = cards[0] > cards[1] ? cards : cards.reverse(), big = _ref[0], small = _ref[1];
      r = maxDiameter / 2.0 - margin;
      return [r, r * Math.sqrt(small / big)];
    };
    normalizeWeights = function(weights) {
      var maxOverlap;
      maxOverlap = Math.min.apply(Math, weights.cards);
      if (maxOverlap < weights.overlap) {
        weights.overlap = maxOverlap;
      }
      if (weights.overlap < 0) {
        return weights.overlap = 0;
      }
    };
    intersectionArea = function(radiuses, angles) {
      var alpha, area, beta, r1, r2;
      r1 = radiuses[0], r2 = radiuses[1];
      alpha = angles[0], beta = angles[1];
      area = function(r, angle) {
        return 0.5 * Math.pow(r, 2) * (angle - Math.sin(angle));
      };
      return area(r1, alpha) + area(r2, beta);
    };
    calcAngles = function(radiuses, distance) {
      var angle, r1, r2;
      angle = function(r1, r2, d) {
        return 2 * Math.acos((Math.pow(d, 2) + Math.pow(r1, 2) - Math.pow(r2, 2)) / (2 * r1 * d));
      };
      r1 = radiuses[0], r2 = radiuses[1];
      return [angle(r1, r2, distance), angle(r2, r1, distance)];
    };
    scaleIntersection = function(weights, radius) {
      var big;
      big = Math.max.apply(Math, weights.cards);
      return Math.PI * Math.pow(radius, 2) * weights.overlap / big;
    };
    findDistance = function(radiuses, interArea) {
      var angles, area, d, delta, lower, rleft, rright, upper, _ref;
      rleft = radiuses[0], rright = radiuses[1];
      _ref = [rleft - rright, rleft + rright], upper = _ref[0], lower = _ref[1];
      d = (upper + lower) / 2.0;
      while (true) {
        angles = calcAngles(radiuses, d);
        area = intersectionArea(radiuses, angles);
        delta = area - interArea;
        console.log(Math.abs(delta));
        if (Math.abs(delta) < 0.1) {
          break;
        }
        if (delta < 0) {
          lower = d;
        } else {
          upper = d;
        }
        d = (upper + lower) / 2.0;
      }
      return d;
    };
    draw = function(paper, radiuses, distance, opts) {
      var cxleft, cxright, cyleft, cyright, left, rbb, right, w, _ref, _ref1;
      _ref = [radiuses[0] + margin, radiuses[0] + margin], cxleft = _ref[0], cyleft = _ref[1];
      _ref1 = [cxleft + distance, cyleft], cxright = _ref1[0], cyright = _ref1[1];
      left = paper.circle(cxleft, cyleft, radiuses[0]);
      left.attr({
        "stroke-width": 0,
        fill: opts.fill.left,
        "fill-opacity": opts["fill-opacity"].left
      });
      right = paper.circle(cxright, cyright, radiuses[1]);
      right.attr({
        "stroke-width": 0,
        fill: opts.fill.right,
        "fill-opacity": opts["fill-opacity"].right
      });
      rbb = right.getBBox();
      w = rbb.x2 + margin;
      return paper.setSize(w, height);
    };
    width = height * 2;
    paper = Raphael(container, width, height);
    normalizeWeights(weights);
    radiuses = calcRadiuses(height, weights.cards);
    interArea = scaleIntersection(weights, Math.max.apply(Math, radiuses));
    distance = findDistance(radiuses, interArea);
    return draw(paper, radiuses, distance, opts);
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.venn = venn;

}).call(this);
